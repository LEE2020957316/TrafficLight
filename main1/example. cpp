#ifndef __CPP_THREAD_H_
#define __CPP_THREAD_H_

/**
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 *
 * (C) 2020, Bernd Porr <mail@bernporr.me.uk>
 **/

#include <thread>

// abstract thread which contains the inner workings of the thread model
class CppThread {

public:
	void start() {
		uthread = new std::thread(CppThread::exec, this); //this：lambda函数， new：分配给指针指向类的地址
	}

	void join() {
		uthread->join(); ////在类CppThread 中调用join函数 
		delete uthread;
		uthread = NULL;
	}

	CppThread() {};
	
	virtual ~CppThread() { // 析构函数，在类？执行释放指针
		if (uthread) {
			delete uthread;
		}
	}

protected:
	// is implemented by its ancestors
	virtual void run() = 0;	

private:
	std::thread* uthread = NULL;

	// static function which points back to the class
	static void exec(CppThread* cppThread) {
		cppThread->run(); //在类CppThread 中调用 run 函数
	}
};




#endif

    
#ifndef DEMO_THREAD_H
#define DEMO_THREAD_H

#include "CppThread.h"

class DemoThread : public CppThread {  //？？类函数， 调用另一个类函数，（猜测），就想void函数调用类void diaoyong函数名(A类， &abc对象名）

public:
	DemoThread(int _offset) { // 类的整型函数对象
		offset = _offset; // like (A(int a))
	}// the same with?: DemoThread(int _offset): offset(_offset);

private:
	void run();

private:
	int offset;
};

#endif
void DemoThread::run() { // 类DT的构造函数.
	for(int i=0;i<10;i++) {
		printf("%d\n",i+offset);
		std::this_thread::sleep_for(std::chrono::milliseconds(10));
	}
}


int main( int argc, const char* argv[] ) {
	DemoThread demoThread1(0);//1. offset= 0； 2.且创建了类对象。
	DemoThread demoThread2(10); //offset= 10
	DemoThread demoThread3(20);
	demoThread1.start();// the same with join.
	demoThread2.start();// use join.
	demoThread3.start();
	demoThread1.join();
	demoThread2.join();
	demoThread3.join();
}
